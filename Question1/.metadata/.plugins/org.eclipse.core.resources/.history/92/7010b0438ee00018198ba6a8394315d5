import java.util.Random;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;

public class Main {

	public static void main(String[] args) throws InterruptedException {
		Random r = new Random(System.currentTimeMillis());
	    int n = 400;
	    int numberOfThreads = Math.abs(r.nextInt())%10 + 4;	//Number of threads
	    while(n%numberOfThreads != 0) {
	    	n++;
	    }
	    int[] arr = new int[n];

	    for(int i = 0; i < n; i++) {
	    	arr[i] = r.nextInt();
	    }
	        
	    int segment = arr.length/numberOfThreads;
	    //The following for-loop is here to search the entire array and finds the
	    //biggest number. Your answer with using threads should be the same.
	    int biggest = arr[0]; 
	    for(int i = 1; i < n; i++) {
	    	if(biggest < arr[i])
		        biggest = arr[i];
	    }
	     System.out.println("The biggest number of the entire array before creating threads is: " + biggest);
	    //You must write a for-loop to create threads. Then write a second for-loop to
	    //start the threads. Complete this part
	    //………………….
	     // start with partitioning the arr
	     int c = 0;
	     int[][] partition = new int[numberOfThreads][segment];
	     System.out.println(numberOfThreads+"  "+segment);
	     /*
	     for(int row = 0; row < numberOfThreads; row++) {
	    	 for(int col = 0; col < segment; col++) {
	    		 partition[row][col] = arr[c];
	    		 c++;
	    	 }
	     }
	     */
	     for(int i = 0; i < arr.length; i++) {
	    	 partition[i%numberOfThreads][i%segment] = arr[i];
	    	 System.out.println(numberOfThreads%(i+1));
	     }
	     
	     MyThread[] threadArr = new MyThread[numberOfThreads];
	     for(int i = 0; i < numberOfThreads;i++) {
	    	 threadArr[i] = new MyThread(partition[i]);
	    	 threadArr[i].start();
	     }
	     for (MyThread myThread : threadArr) {
			myThread.join();
	     }
	     int tBiggest = 0;
	     for (MyThread myThread : threadArr) {
	    	 if(myThread.biggestFromThread > tBiggest) tBiggest = myThread.biggestFromThread;
	     }

	     System.out.println("The biggest number of these " + numberOfThreads + 
	    		 " threads is: " + tBiggest);
	}

}
