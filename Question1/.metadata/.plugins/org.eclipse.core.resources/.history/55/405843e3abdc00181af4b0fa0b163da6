import java.util.Random;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;

public class Main {

	public static void main(String[] args) {
		Random r = new Random(System.currentTimeMillis());
	    int n = 400;
	    int[] arr = new int[n];
	    int numberOfThreads = Math.abs(r.nextInt())%10 + 4;	//Number of threads
	    while(n%numberOfThreads != 0) {
	    	n++;
	    }
	    for(int i = 0; i < n; i++) {
	    	arr[i] = r.nextInt();
	    }
	        
	    int segment = arr.length/numberOfThreads;
	    //The following for-loop is here to search the entire array and finds the
	    //biggest number. Your answer with using threads should be the same.
	    int biggest = arr[0]; 
	    for(int i = 1; i < n; i++) {
	    	if(biggest < arr[i])
		        biggest = arr[i];
	    }
	     System.out.println("The biggest number of the entire array before creating threads is: " + biggest);
	    //You must write a for-loop to create threads. Then write a second for-loop to
	    //start the threads. Complete this part
	    //………………….
	     System.out.println(segment);
	     MyThread[] threadArr = new MyThread[numberOfThreads];
	    for (MyThread myThread : threadArr) {
	       myThread = new MyThread(arr);
		}
	    List<Integer> arrList = Arrays.asList(arr);
	    List<int[]> arrList2 = new ArrayList<int[]>(Arrays.asList(arr));
	    arrList2 = Arrays.asList(arr);
	    List<Integer> subset = arr.sublist(0,5);

	    System.out.println("The biggest number of these " + numberOfThreads + 
	      " threads is: " + biggest);


	}

}
